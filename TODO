==================
TODO:
- Support all clauses of kernel, data, and loop directive
- Fully support use of non-standard types in C/C++ (template, class, union, enum, typedef, and struct)
- Support function template of C++
- Support class template of C++
- Support 'kernels loop' directive
- Improve pragmadecomposer parser to detect malformed reduction/private
- Support 2D arrays
- Support parallel directive
- Support entire API
- BUGFIX: codegen fails to find the type/size upon passing struct element to data clause
- Support dynamic shared memory size (for smc and cache clause)
- BUGFIX: '\n' character in for statement cause XML crash.
- BUGFIX: two terminating condition in the for loop may lead to XML crash.
- OpenACC syntax parser may disallow valid cases. Fix the parser state machine. (related file: parser/oaccparser.y)
- Add support for parallel directive
- Add `name' clause to kernels directive, allowing easy debugging.
- IMPROVEMENT: __smc_select_* procedures must be optimized. nvcc alone cannot highly optimize the code. these are generated in case of `cache' directive.
- Support Intel ISPC backend.
- An issue with atomic pragmas on OpenCL; adding '#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable' should be added to OpenCL kernels.

CHANGES:
- Replacing pycparser XML generator with srcML generator (faster and lower-level)
- Support serial loops
- Fully-support dynamic allocation
- Detect pragma region without full-bracketing
- Detecting the region of `for` loop with nested one-statement if-else
- Fixing the bug in copy statement detection (parenteces are not allowed by now)
- Prepare a comprehensive ipmacc accelerator query (like clinfo)
- Replace all `define` micro to prevent clBuiltProgram failure
- Support OpenCL generators
- Function call inside the region
- Improve compilation speed
- Support for user-defined data types
- Launch nested loops over multi-dimensional thread-blocks and kernel grids
- Implementing '#pragma acc enter data'
- Implementing '#pragma acc exit data'
- [Apr 21, 2015] Supporting NVIDIA Kepler's Read Only Cache. Enabled by '--enable readonlycache' compiler flag.
- [May 16, 2015] early support for `atomic capture` added. Sample added in test-case/atomictest.c. For cuda-backend, pass `arch=sm_13` flag to ipmacc.

